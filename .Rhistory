L
}
comp_func_params(formulas$at, formulas$f1t, formulas$Qt, formulas$ft, formulas$bt, formulas$mu0t)
optim_results <- NA
# Check if function parameters are consistent to those provided in starting list:
if( setequal(names(starting_params), variables) == FALSE) {
stop("Provided set of function parameters is not equal to that one provided in starting list or vise-versa.")
}
if(verbose == TRUE) {
cat("Variables:\n")
cat(variables,"\n")
cat("Functions:\n")
print(at)
print(f1t)
print(Qt)
print(ft)
print(bt)
print(mu0t)
}
## Optimization:
#result <- optim(par = unlist(starting_params),
#              fn=maxlik_t, dat = as.matrix(data), control = list(fnscale=-1, trace=T, maxit=10000, factr=1e-16, ndeps=c(1e-12, 1e-12, 1e-12,1e-12,1e-16,1e-12,1e-12,1e-12,1e-12)),
#              method="L-BFGS-B", lower = c(-0.5, -0.5, -1, 0,1e-12,1e-6,1e-6,1e-6, 1e-4), upper = c(0, 3, 0, Inf, 1e-7, Inf, Inf, 1, 0.1))
#print(unlist(starting_params))
tryCatch(optim(par = unlist(starting_params),
fn=maxlik_t, dat = as.matrix(data), control = list(fnscale=-1, trace=T, maxit=10000, factr=1e-16),
method="L-BFGS-B",
lower=lower_bound,
upper=upper_bound),
error=function(e) {print(e)},
finally=NA)
final_res <<- list(results, optim_results)
final_res
}
#' spm_time_dep : a function that can handle time-dependant coefficients:
#' @param start : a list of starting parameters, default: llist(a=-0.5, f1=80, Q=2e-8, f=80, b=5, mu0=1e-5, theta=0.08),
#' @param formulas : a list of formulas that define age (time) - dependency. Default: list(at="a1*t+a2", f1t="f1", Qt="Q*exp(theta*t)", ft="f", bt="b", mu0t="mu0*exp(theta*t)")
#' @return optimal coefficients
#' @examples
#' library(spm)
#' Data preparation:
#' N <- 1000
#' data <- simdata_cont(N=N, aH=-0.05, f1H=80, QH=2e-8, fH=80, bH=5, mu0H=2e-5, thetaH=0.08)
#' opt.par <- spm_time_dep(data[,2:6], formulas=list(at="a", f1t="f1", Qt="Q*exp(theta*t)", ft="f", bt="b", mu0t="mu0*exp(theta*t)"), start=list(a=-0.5, f1=80, Q=2e-8, f=80, b=5, mu0=1e-5, theta=0.08))
#' opt.par
spm_time_dep <- function(data,
start=list(a1=-0.5, a2=0.2, f1=80, Q=2e-8, f=80, b=5, mu0=1e-5, theta=0.08),
formulas=list(at="a1*t+a2", f1t="f1", Qt="Q*exp(theta*t)", ft="f", bt="b", mu0t="mu0*exp(theta*t)"),
verbose=TRUE,
lower_bound=NULL, upper_bound=NULL) {
# Values for lower/upper boundaries could be:
#lower_bound=c(-1, 0, 2e-9, 0, 0, 0, 0, 0), upper_bound=c(-0.001, Inf, 1e-5, 1e-5, Inf, Inf, 1e-3, Inf)
# Lower and upper boundaries calculation:
if(is.null(lower_bound)) {
lower_bound <- c()
for(i in 1:length(start)) {
lower_bound <- c(lower_bound, ifelse(start[[i]] < 0, start[[i]] + 0.5*start[[i]], start[[i]] - 0.5*start[[i]]))
}
}
if(is.null(upper_bound)) {
upper_bound <- c()
for(i in 1:length(start)) {
upper_bound <- c(upper_bound, ifelse(start[[i]] < 0, start[[i]] - 0.5*start[[i]], start[[i]] + 0.5*start[[i]]))
}
}
# Optimization:
res = optimize(data, start, formulas, verbose, lower_bound, upper_bound)
invisible(res)
}
ans=spm_time_dep(data[,2:6], formulas=list(at="a", f1t="f1", Qt="Q*exp(theta*t)", ft="f", bt="b", mu0t="mu0*exp(theta*t)"),
start=list(a=-0.05, f1=80, Q=2e-8, f=80, b=5, mu0=1e-5, theta=0.08))
ans=spm_time_dep(data[,2:6], formulas=list(at="a+gt", f1t="f1", Qt="Q*exp(theta*t)", ft="f", bt="b", mu0t="mu0*exp(theta*t)"),
start=list(a=-0.05, gt=9, f1=80, Q=2e-8, f=80, b=5, mu0=1e-5, theta=0.08))
a <- makeCacheMatrix(c(2,3,5,7))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
# This function construct a cached matrix object.
# Example:
# a <- makeCacheMatrix()
# a$set(matrix(c(1,2,3,4,5,6,7,8,800),ncol=3))
# a
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
if(!all(is.na(x))) {
print(y)
print(x)
if(!identical(y,x)) {
cat("Setting the value of the matrix...\n")
x <<- y
inv <<- NULL
} else {
cat("Provided matrix is equal to the previous one. Nothing to set.\n")
}
} else {
x <<- y
inv <<- NULL
}
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
ans <- list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
ans
}
## Write a short comment describing this function
# This functon performs a cached matrix inverse.
# If inverse was previously calculated or
# matrix is the same, it returns
# a cached value of inverse.
# If not, it calculates the matrix inverse and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
a <- makeCacheMatrix(c(2,3,5,7))
cacheSolve(a)
a <- makeCacheMatrix(c(2,3,5,7,ncol=2))
cacheSolve(a)
a <- makeCacheMatrix(c(2,3,5,7),ncol=2))
a <- makeCacheMatrix(matrix(c(2,3,5,7),ncol=2))
cacheSolve(a)
a <- makeCacheMatrix(matrix(c(2,3,5,7),ncol=2))
a_inversed <- cacheSolve(a)
a_inversed
b <- makeCacheMatrix(matrix(c(2,3,5,7),ncol=2))
cacheSolve(b)
cacheSolve(a)
b <- makeCacheMatrix(matrix(c(2,3,5,7),ncol=2))
b <- makeCacheMatrix(matrix(c(2,3,5,7),ncol=2))
b.set(matrix(c(2,3,5,7))
)
b.set(matrix(c(2,3,5,7)),ncol=2)
b$set(matrix(c(2,3,5,7)),ncol=2)
b$set(matrix(c(2,3,5,7),ncol=2)
)
b$set(matrix(c(2,3,5,7),ncol=2))
a$set(matrix(c(2,3,5,77),ncol=2))
a_inversed <- cacheSolve(a)
a_inversed
a$set(matrix(c(2,3,5,77),ncol=2))
a_inversed <- cacheSolve(a)
a_inversed
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
# This function construct a cached matrix object.
# Example:
# a <- makeCacheMatrix()
# a$set(matrix(c(1,2,3,4,5,6,7,8,800),ncol=3))
# a
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
if(!all(is.na(x))) {
if(!identical(y,x)) {
cat("Setting the value of the matrix...\n")
x <<- y
inv <<- NULL
} else {
cat("Provided matrix is equal to the previous one. Nothing to set.\n")
}
} else {
x <<- y
inv <<- NULL
}
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
ans <- list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
ans
}
## Write a short comment describing this function
# This functon performs a cached matrix inverse.
# If inverse was previously calculated or
# matrix is the same, it returns
# a cached value of inverse.
# If not, it calculates the matrix inverse and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## Example of how to run:
a <- makeCacheMatrix(matrix(c(2,3,5,7),ncol=2))
a_inversed <- cacheSolve(a)
a_inversed
# Setting a new value:
a$set(matrix(c(2,3,5,77),ncol=2))
a_inversed <- cacheSolve(a)
a_inversed
# Testing if matrix and its inverse are equal to the previous ones:
a$set(matrix(c(2,3,5,77),ncol=2))
a_inversed <- cacheSolve(a)
a_inversed
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?points
?text()
?lines
axis
?axis
?lattice
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
airquality
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
?ggplot2
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
?panel.lmline
2+3
library(tools)
?tools
?file.exists()
?file.exists()
# Getting and cleaning data class project
library(plyr)
setwd("~/Dropbox/Data Scientist Specialization/Getting and cleaning data/Project/")
x.train <- read.table("UCI HAR Dataset/train/X_train.txt")
y.train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject.train <- read.table("UCI HAR Dataset/train/subject_train.txt")
data.train <- data.frame(x.train, y.train, subject.train)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
y.test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject.test <- read.table("UCI HAR Dataset/test/subject_test.txt")
data.test <- data.frame(x.test, y.test, subject.test)
### Merging train and test data sets:
data <- rbind(data.train, data.test)
features <- read.table("UCI HAR Dataset/features.txt")
features
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
data.mean.std
head(data.mean.std)
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids]), "Y", "SubjId"))
head(data.mean.std)
clean.features <- tolower(names(data.mean.std))
clean.features
clean.features <- gsub("-", "", clean.features)
clean.features
clean.features <- gsub("\\C", "", clean.features)
clean.features
clean.features <- gsub("\\(\\)", "", clean.features)
clean.features
names(data.mean.std) <- clean.features
head(names(data.mean.std))
head(data.mean.std)
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
## 3: Use descriptive activity names to name the activities in the data set.
#activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids]), "Y", "SubjId"))
## 4: Appropriately labels the data set with descriptive variable names.
clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features, "Y", "SubjId")
x.train <- read.table("UCI HAR Dataset/train/X_train.txt")
y.train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject.train <- read.table("UCI HAR Dataset/train/subject_train.txt")
data.train <- data.frame(x.train, y.train, subject.train)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
y.test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject.test <- read.table("UCI HAR Dataset/test/subject_test.txt")
data.test <- data.frame(x.test, y.test, subject.test)
### Merging train and test data sets:
data <- rbind(data.train, data.test)
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids]), "Y", "SubjId"))
clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
clean.features
names(data.mean.std)
rownames(data.mean.std) <- c(as.character(droplevels(features$V2[ids]), "Y", "SubjId"))
rownames(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
rownames(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
names(data.mean.std)
clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features) #, "Y", "SubjId")
View(data.test)
View(data)
head(data)
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "y", "subjid")
head(second.datatest)
features
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
activity.names
names(second.datatest) <- c(clean.features, "activity", "subjid")
tmp <- second.datatest$activity
tmp
tmp <- data.frame(second.datatest$activity)
tmp
head(tmp)
ans=merge(tmp, activity.names, by.x="second.datatest.activity", by.y="V1", all = TRUE)
ans
second.datatest[, "activity"]
second.datatest[, "activity"] <- activity.names[, "V1" == second.datatest$activity]
second.datatest
second.datatest[, "activity"]
head(second.datatest)
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "activity", "subjid")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
tmp <- data.frame(second.datatest$activity)
ans=merge(tmp, activity.names, by.x="second.datatest.activity", by.y="V1", all = TRUE)
second.datatest
second.datatest$activity <- activity.names$V2[second.datatest$activity]
second.datatest$activity
head(second.datatest)
activity.names
second.datatest$activity <- tolower(activity.names$V2[second.datatest$activity])
head(second.datatest)
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "activity", "subjid")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
#second.dataset <- ddply(data.no.mean.std, c("Y","SubjId"), numcolwise(mean))
second.datatest$activity <- tolower(activity.names$V2[second.datatest$activity])
head(second.datatest)
second.dataset <- ddply(data.no.mean.std, c("activity","subjid"), numcolwise(mean))
second.dataset.final <- ddply(second.datatest, c("activity","subjid"), numcolwise(mean))
head(second.dataset.final)
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
## 3: Use descriptive activity names to name the activities in the data set.
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
## 4: Appropriately labels the data set with descriptive variable names.
#clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features)
## 5: From the data set in step 4, create a second,
# independent tidy data set with the average of
# each variable for each activity and each subject.
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "activity", "subjid")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
second.datatest$activity <- tolower(activity.names$V2[second.datatest$activity])
second.dataset.final <- ddply(second.datatest, c("activity","subjid"), numcolwise(mean))
head(second.dataset.final)
clean.features
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
## 3: Use descriptive activity names to name the activities in the data set.
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
## 4: Appropriately labels the data set with descriptive variable names.
clean.features <- names(data.mean.std) #clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features)
## 5: From the data set in step 4, create a second,
# independent tidy data set with the average of
# each variable for each activity and each subject.
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "activity", "subjid")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
second.datatest$activity <- tolower(activity.names$V2[second.datatest$activity])
second.dataset.final <- ddply(second.datatest, c("activity","subjid"), numcolwise(mean))
head(second.dataset.final)
## 2: Extract the measurements on the mean and standard deviation for each measurement.
### Reading the feature names:
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
## 3: Use descriptive activity names to name the activities in the data set.
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
## 4: Appropriately labels the data set with descriptive variable names.
clean.features <- names(data.mean.std) #clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features)
## 5: From the data set in step 4, create a second,
# independent tidy data set with the average of
# each variable for each activity and each subject.
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "activity", "subjId")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
second.datatest$activity <- tolower(activity.names$V2[second.datatest$activity])
second.dataset.final <- ddply(second.datatest, c("activity","subjid"), numcolwise(mean))
features <- read.table("UCI HAR Dataset/features.txt")
mean.id <- grep("mean()",features$V2, ignore.case = F)
std.id <- grep("std()",features$V2, ignore.case = F)
ids <- c(mean.id, std.id)
data.mean.std <- data[, ids]
## 3: Use descriptive activity names to name the activities in the data set.
names(data.mean.std) <- c(as.character(droplevels(features$V2[ids])))
## 4: Appropriately labels the data set with descriptive variable names.
clean.features <- names(data.mean.std) #clean.features <- tolower(names(data.mean.std))
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features)
## 5: From the data set in step 4, create a second,
# independent tidy data set with the average of
# each variable for each activity and each subject.
second.datatest <- cbind(data.mean.std, data$V1.1, data$V1.2)
names(second.datatest) <- c(clean.features, "activity", "subjId")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
second.datatest$activity <- tolower(activity.names$V2[second.datatest$activity])
second.dataset.final <- ddply(second.datatest, c("activity","subjId"), numcolwise(mean))
head(second.dataset.final)
head(second.datatest)
dim(second.dataset.final)
dim(second.dataset)
dim(second.datatest)
10299/180
head(data)
features <- read.table("UCI HAR Dataset/features.txt")
##Extracting only the measurements on the mean and standard deviation for each measurement:
mean.id <- grep("mean()",features$V2, ignore.case = F) # Column Ids for means
std.id <- grep("std()",features$V2, ignore.case = F) # Column Ids for standard deviations
ids <- c(mean.id, std.id) # Column Ids for both mean and standard deviation
data.mean.std <- cbind(data$V1.1, data$dV1.2, data[, ids]) # Only means and standard deviations for each measurement
features <- read.table("UCI HAR Dataset/features.txt")
##Extracting only the measurements on the mean and standard deviation for each measurement:
mean.id <- grep("mean()",features$V2, ignore.case = F) # Column Ids for means
std.id <- grep("std()",features$V2, ignore.case = F) # Column Ids for standard deviations
ids <- c(mean.id, std.id) # Column Ids for both mean and standard deviation
data.mean.std <- cbind(data$V1.1, data$V1.2, data[, ids]) # Only means and standard deviations for each measurement
data.mean.std
head(data.mean.std)
names(data.mean.std) <- c("activity", "subjId", as.character(droplevels(features$V2[ids])))
names(data.mean.std)
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
activity.names <- read.table("UCI HAR Dataset/activity_labels.txt")
data.mean.std$activity <- tolower(activity.names$V2[data.mean.std$activity])
head(data.mean.std)
clean.features <- names(data.mean.std)
clean.features <- gsub("-", "", clean.features)
clean.features <- gsub("\\(\\)", "", clean.features)
names(data.mean.std) <- c(clean.features)
second.dataset <- ddply(data.mean.std, c("activity","subjId"), numcolwise(mean))
head(second.dataset)
dim(second.dataset)
activity.names$V2
tolower(activity.names$V2)
cat(tolower(activity.names$V2))
class(data.mean.std$activity)
cat(data.mean.std$subjId)
cat(second.dataset$subjId)
unique(cat(second.dataset$subjId))
cat(unique(second.dataset$subjId))
names(second.dataset)
grep("mean()",features$V2, ignore.case = F)
features$V2
*Units: None
